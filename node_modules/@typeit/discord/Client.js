"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const Glob = require("glob");
const _1 = require(".");
class Client extends discord_js_1.Client {
    constructor(options) {
        super(options);
        this._loadClasses = [];
        this._loadedOnEvents = [];
        this._loadedOnceEvents = [];
        this.silent = options ? options.silent : false;
    }
    get silent() {
        return this._silent;
    }
    set silent(value) {
        this._silent = value;
    }
    static setDiscordParams(discordInstance, params) {
        return _1.MetadataStorage.Instance.setDiscordParams(discordInstance, params);
    }
    static setCommandParams(discordInstance, instanceMethod, params) {
        return _1.MetadataStorage.Instance.setCommandParams(discordInstance, instanceMethod, params);
    }
    static getCommandsIntrospection(forPrefix) {
        return _1.MetadataStorage.Instance.getCommandsIntrospection(forPrefix);
    }
    static getCommands(forPrefix) {
        return _1.MetadataStorage.Instance.getCommands(forPrefix);
    }
    login(token, ...loadClasses) {
        this._loadClasses = loadClasses;
        this.loadClasses();
        _1.MetadataStorage.Instance.Build(this);
        _1.MetadataStorage.Instance.Ons.map(async (on) => {
            if (on.params.once &&
                this._loadedOnceEvents.indexOf(on.params.event) === -1) {
                this.once(on.params.event, _1.MetadataStorage.Instance.compileOnForEvent(on.params.event, this, true));
                this._loadedOnceEvents.push(on.params.event);
            }
            else if (this._loadedOnEvents.indexOf(on.params.event) === -1) {
                this.on(on.params.event, _1.MetadataStorage.Instance.compileOnForEvent(on.params.event, this));
                this._loadedOnEvents.push(on.params.event);
            }
            if (!this.silent) {
                let eventName = on.params.event;
                if (on.params.commandName !== undefined) {
                    const prefix = on.params.prefix || on.params.linkedInstance.params.prefix;
                    let commandName = on.params.commandName;
                    if (!on.params.commandCaseSensitive && !on.params.linkedInstance.params.commandCaseSensitive) {
                        commandName = commandName.toLowerCase();
                    }
                    if (on.params.commandName === "") {
                        eventName += ` (Command not found "${prefix}")`;
                    }
                    else {
                        eventName += ` (Command "${prefix}${on.params.commandName}")`;
                    }
                }
                console.log(`${eventName}: ${on.class.name}.${on.key}`);
            }
        });
        return super.login(token);
    }
    loadClasses() {
        if (this._loadClasses) {
            this._loadClasses.map((file) => {
                if (typeof file === "string") {
                    const files = Glob.sync(file);
                    files.map((file) => {
                        require(file);
                    });
                }
            });
        }
    }
}
exports.Client = Client;
//# sourceMappingURL=Client.js.map