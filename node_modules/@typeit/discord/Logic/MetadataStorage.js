"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Guards_1 = require("../Guards");
class MetadataStorage {
    constructor() {
        this._ons = [];
        this._guards = [];
        this._instances = [];
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new MetadataStorage();
        }
        return this._instance;
    }
    get Ons() {
        return this.getReadonlyArray(this._ons);
    }
    AddOn(on) {
        this._ons.push(on);
    }
    AddGuard(guard) {
        this._guards.push(guard);
    }
    AddInstance(classType) {
        this._instances.push(Object.assign(Object.assign({}, classType), { params: Object.assign({ instance: new classType.class() }, classType.params) }));
    }
    Build(client) {
        const commands = this._ons.reduce((prev, on) => {
            if (on.params.commandName) {
                prev.push(on.params.commandName);
            }
            return prev;
        }, []);
        this._ons.map((on) => {
            on.params.guards = this._guards.reverse().filter((guard) => {
                return (guard.class === on.class &&
                    guard.params.method === on.params.method);
            }, []);
            on.params.guardFn = async (client, ...params) => {
                let res = true;
                for (const fn of on.params.guards) {
                    if (res) {
                        res = await fn.params.fn(...params, client);
                    }
                    else {
                        break;
                    }
                }
                return res;
            };
            const instance = this._instances.find((instance) => instance.class === on.class);
            if (instance) {
                on.params.linkedInstance = instance;
            }
            on.params.compiledMethod = async (...params) => {
                let command = on;
                let execute = true;
                if (on.params.event === "message") {
                    if (on.params.commandName !== undefined) {
                        execute = false;
                        const message = params[0];
                        const prefix = on.params.prefix || on.params.linkedInstance.params.prefix;
                        if (Guards_1.Prefix(prefix)(message)) {
                            if (message.author.id !== client.user.id) {
                                const params = message.content.split(" ");
                                let testedCommand = params[0].replace(prefix, "");
                                let commandName = on.params.commandName;
                                let allCommands = commands;
                                const lowerCommands = allCommands.map((command) => command.toLowerCase());
                                const notFoundFn = this._ons.find((cmd) => {
                                    return ((cmd.params.prefix || cmd.params.linkedInstance.params.prefix) === prefix &&
                                        cmd.params.commandName === "");
                                });
                                if (testedCommand.toLowerCase() === commandName.toLowerCase()) {
                                    const originalCommand = testedCommand;
                                    message.prefix = prefix;
                                    message.command = testedCommand;
                                    message.commandWithPrefix = prefix + testedCommand;
                                    message.originalCommand = originalCommand;
                                    message.originalCommandWithPrefix = prefix + originalCommand;
                                    message.params = params;
                                    message.params.splice(0, 1);
                                    if (!on.params.linkedInstance.params.commandCaseSensitive &&
                                        !on.params.commandCaseSensitive &&
                                        on.params.commandCaseSensitive !== undefined) {
                                        testedCommand = testedCommand.toLowerCase();
                                        commandName = commandName.toLowerCase();
                                        allCommands = lowerCommands;
                                    }
                                    if (allCommands.indexOf(testedCommand) === -1) {
                                        if (notFoundFn) {
                                            command = notFoundFn;
                                            execute = true;
                                        }
                                    }
                                }
                                else {
                                    if (lowerCommands.indexOf(testedCommand.toLowerCase()) === -1) {
                                        testedCommand = "";
                                    }
                                }
                                if (testedCommand === commandName) {
                                    execute = true;
                                    command = on;
                                }
                            }
                        }
                    }
                }
                if (execute) {
                    const executeMain = await command.params.guardFn(client, ...params);
                    if (executeMain) {
                        return await this.executeBindedOn(command, params, client);
                    }
                }
            };
        });
    }
    setDiscordParams(discordInstance, params) {
        const discord = this._instances.find((instance) => instance.params.instance === discordInstance);
        if (discord) {
            discord.params = Object.assign(Object.assign({}, discord.params), params);
            return true;
        }
        return false;
    }
    getCommands(forPrefix) {
        return this.getCommandsIntrospection(forPrefix).map((command) => {
            return {
                prefix: command.prefix || command.linkedInstance.params.prefix,
                commandName: command.commandName,
                description: command.description,
                infos: command.infos
            };
        });
    }
    getCommandsIntrospection(forPrefix) {
        return this._ons.reduce((prev, on) => {
            if (on.params.commandName) {
                if (forPrefix) {
                    const prefix = on.params.prefix || on.params.linkedInstance.params.prefix;
                    if (forPrefix === prefix) {
                        prev.push(on.params);
                    }
                }
                else {
                    prev.push(on.params);
                }
            }
            return prev;
        }, []);
    }
    setCommandParams(discordInstance, instanceMethod, params) {
        const on = this._ons.find((on) => (on.params.linkedInstance.params.instance === discordInstance &&
            on.params.method === instanceMethod));
        if (on) {
            on.params = Object.assign(Object.assign({}, on.params), params);
            return true;
        }
        return false;
    }
    compileOnForEvent(event, client, once = false) {
        const ons = this._ons.filter(on => (on.params.event === event &&
            on.params.once === once));
        return async (...params) => {
            for (const on of ons) {
                await on.params.compiledMethod(...params, client);
            }
        };
    }
    executeBindedOn(on, params, client) {
        if (on.params.linkedInstance && on.params.linkedInstance.params.instance) {
            return on.params.method.bind(on.params.linkedInstance.params.instance)(...params, client);
        }
        else {
            return on.params.method(...params, client);
        }
    }
    getReadonlyArray(array) {
        return array;
    }
}
exports.MetadataStorage = MetadataStorage;
//# sourceMappingURL=MetadataStorage.js.map